import {
  core.binary {binary, binary-length},
  core.c-int {c-int, from-c-int},
  core.c-size {C-Size},
  core.cell {mutate},
  core.external {write},
  core.file.descriptor {stdout},
  core.memory {store-float, store-int, store-int16, store-int32, store-int8},
  core.pointer {null-pointer, shift},
  this.move.extract {extract},
  this.move.make-builder {make-builder},
  this.move.private.extend {_extend, _extension-required-p},
  this.rule.builder {_Builder, builder},
}

foreign {
  llvm.memcpy.p0.p0.i64(pointer, pointer, int64, int1): void,
  snprintf(pointer, c-int, pointer): c-int,
  sprintf(pointer, pointer): c-int,
}

define _get-head-ptr(b: &builder, fragment-size: int): pointer {
  if _extension-required-p(b, fragment-size) {
    _extend(b);
    _get-head-ptr(b, fragment-size)
  } else {
    core.cell.borrow(b, function (val) {
      tie _Builder of {cursor, content} = val in
      quote {shift(core.binary._get-content-pointer(content), *cursor)}
    })
  }
}

define _proceed(b: &builder, size: int): unit {
  mutate(b, function (_b) {
    let _Builder of {cursor, content} = _b in
    _Builder of {cursor = add-int(cursor, size), content}
  })
}

define append-int64(b: &builder, x: int): unit {
  let size = 8 in
  let content-head-ptr = _get-head-ptr(b, size) in
  store-int(x, content-head-ptr);
  _proceed(b, size)
}

define append-int64-UTF8(b: &builder, x: int64): unit {
  let fmt = core.text._get-content-pointer("%ld\0") in
  let fragment-size = from-c-int(magic external snprintf(null-pointer, 0, fmt)(x: int64)) in
  let content-head-ptr = _get-head-ptr(b, fragment-size) in
  let _ = magic external sprintf(content-head-ptr, fmt)(x: int64) in
  _proceed(b, fragment-size)
}

define append-int32(b: &builder, x: int32): unit {
  let size = 4 in
  let content-head-ptr = _get-head-ptr(b, size) in
  store-int32(x, content-head-ptr);
  _proceed(b, size)
}

define append-int32-UTF8(b: &builder, x: int32): unit {
  append-int64-UTF8(b, zext-int32-int64(x))
}

define append-int16(b: &builder, x: int16): unit {
  let size = 2 in
  let content-head-ptr = _get-head-ptr(b, size) in
  store-int16(x, content-head-ptr);
  _proceed(b, size)
}

define append-int16-UTF8(b: &builder, x: int16): unit {
  append-int64-UTF8(b, zext-int16-int64(x))
}

define append-int8(b: &builder, x: int8): unit {
  let size = 1 in
  let content-head-ptr = _get-head-ptr(b, size) in
  store-int8(x, content-head-ptr);
  _proceed(b, size)
}

define append-int8-UTF8(b: &builder, x: int8): unit {
  append-int64-UTF8(b, zext-int8-int64(x))
}

define append-float64(b: &builder, x: float): unit {
  let size = 8 in
  let content-head-ptr = _get-head-ptr(b, size) in
  store-float(x, content-head-ptr);
  _proceed(b, size)
}

define append-float64-UTF8(b: &builder, x: float64): unit {
  let fmt = core.text._get-content-pointer("%lf\0") in
  let fragment-size = from-c-int(magic external snprintf(null-pointer, 0, fmt)(x: float64)) in
  let content-head-ptr = _get-head-ptr(b, fragment-size) in
  let _ = magic external sprintf(content-head-ptr, fmt)(x: float64) in
  _proceed(b, fragment-size)
}

define append-float32(b: &builder, x: float32): unit {
  let size = 4 in
  let content-head-ptr = _get-head-ptr(b, size) in
  magic store(float32, x, content-head-ptr);
  _proceed(b, size)
}

define append-float32-UTF8(b: &builder, x: float32): unit {
  append-float64-UTF8(b, fpext-float32-float64(x))
}

define append-float16(b: &builder, x: float16): unit {
  let size = 2 in
  let content-head-ptr = _get-head-ptr(b, size) in
  magic store(float16, x, content-head-ptr);
  _proceed(b, size)
}

define append-float16-UTF8(b: &builder, x: float16): unit {
  append-float64-UTF8(b, fpext-float16-float64(x))
}

define append-binary(b: &builder, x: &binary): unit {
  let text-ptr = core.binary._get-content-pointer(x) in
  let text-byte-len = core.binary.binary-length(x) in
  let content-head-ptr = _get-head-ptr(b, text-byte-len) in
  let _ = magic external llvm.memcpy.p0.p0.i64(content-head-ptr, text-ptr, text-byte-len, 0) in
  _proceed(b, text-byte-len)
}

define append-text(b: &builder, x: &text): unit {
  let text-ptr = core.text._get-content-pointer(x) in
  let text-byte-len = core.text.text-byte-length(x) in
  let content-head-ptr = _get-head-ptr(b, text-byte-len) in
  let _ = magic external llvm.memcpy.p0.p0.i64(content-head-ptr, text-ptr, text-byte-len, 0) in
  _proceed(b, text-byte-len)
}

foreign {
  write(int, pointer, int): int,
}

define zen(): unit {
  let b = make-builder(4) in
  let _ on b =
    append-int32(b, 3);
    append-int32(b, 65535)
    // append-int64(b, 3);
    // append-int64(b, 4);
    // append-int64(b, 5);
    // append-int64(b, 6);
    // append-int64(b, 7);
    // append-int64(b, 8);
    // append-int64(b, 9)
    // append-text(b, "hello");
    // append-int64-UTF8(b, 123);
    // append-text(b, "world")
  in
  pin result = extract(b) in
  let len = binary-length(result) in
  let ptr = core.binary._get-content-pointer(result) in
  let _ = write(stdout, ptr, C-Size(len)) in
  Unit
  // printf("{}", [_Text(result)])
  // let b = create(4) in
  // let _ on b =
  //   append-text(b, "hello");
  //   append-float16-UTF8(b, 2.3);
  //   append-int64-UTF8(b, -123);
  //   append-float64-UTF8(b, -123.223);
  //   append-text(b, "あいうえお")
  // in
  // let txt = get(b) in
  // let len on txt = core.binary.binary-length(txt) in
  // let stdout: int = 1 in
  // let ptr on txt = core.binary._get-content-pointer(txt) in
  // magic external write(stdout, ptr, len);
  // discard(txt)
}
