import {
  core.binary {_get-content-pointer, allocate},
  core.cell {mutate},
  core.control {discard},
  this.rule.builder {_Builder, _builder, builder},
}

foreign {
  llvm.memcpy.p0.p0.i64(pointer, pointer, int64, int1): void,
}

define _extension-required-p(b: &builder, new-size: int): bool {
  core.cell.borrow(b, function (val) {
    tie _Builder of {cursor, content} = val in
    let current-len = core.binary.binary-length(content) in
    quote {gt-int(add-int(*cursor, new-size), current-len)}
  })
}

define _extend(b: &builder): unit {
  mutate(b, function (x: _builder) {
    let _Builder of {cursor, content} = x in
    let current-size on content = core.binary.binary-length(content) in
    let new-content = allocate(mul-int(current-size, 2)) in
    let content-ptr on content = _get-content-pointer(content) in
    let new-content-ptr on new-content = _get-content-pointer(new-content) in
    let _ = magic external llvm.memcpy.p0.p0.i64(new-content-ptr, content-ptr, cursor, 0) in
    discard(content);
    _Builder(cursor, new-content)
  })
}
