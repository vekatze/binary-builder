import {
  core.binary {binary},
  core.int.show {show-int},
  core.memory {store-int, store-int8},
  core.text {_Text},
  core.word,
  this.entity {_Builder, _extend, _extension-required-p, builder, create, get},
}

foreign {
  llvm.memcpy.p0.p0.i64(pointer, pointer, int64, int1): void,
  snprintf(pointer, int, pointer): int,
  sprintf(pointer, pointer): int,
}

define _get-head-ptr(b: &builder, fragment-size: int): int {
  if _extension-required-p(b, fragment-size) {
    _extend(b);
    _get-head-ptr(b, fragment-size)
  } else {
    tie _Builder of {cursor, content} = core.cell.read(b) in
    add-int(core.binary._get-content-pointer(content), *cursor)
  }
}

define _proceed(b: &builder, size: int): unit {
  mutate(b, function (_b) {
    let _Builder of {cursor, content} = _b in
    _Builder of {cursor = add-int(cursor, size), content}
  })
}

define append-int64-little-endian(b: &builder, x: int64): unit {
  let piece-0 = trunc-int64-int8(lshr-int64(and-int64(0x00000000000000ff, x), 0)) in
  let piece-1 = trunc-int64-int8(lshr-int64(and-int64(0x000000000000ff00, x), 8)) in
  let piece-2 = trunc-int64-int8(lshr-int64(and-int64(0x0000000000ff0000, x), 16)) in
  let piece-3 = trunc-int64-int8(lshr-int64(and-int64(0x00000000ff000000, x), 24)) in
  let piece-4 = trunc-int64-int8(lshr-int64(and-int64(0x000000ff00000000, x), 32)) in
  let piece-5 = trunc-int64-int8(lshr-int64(and-int64(0x0000ff0000000000, x), 40)) in
  let piece-6 = trunc-int64-int8(lshr-int64(and-int64(0x00ff000000000000, x), 48)) in
  let piece-7 = trunc-int64-int8(lshr-int64(and-int64(0xff00000000000000, x), 56)) in
  let content-head-ptr = _get-head-ptr(b, 8) in
  store-int8(piece-0, add-int(content-head-ptr, 0));
  store-int8(piece-1, add-int(content-head-ptr, 1));
  store-int8(piece-2, add-int(content-head-ptr, 2));
  store-int8(piece-3, add-int(content-head-ptr, 3));
  store-int8(piece-4, add-int(content-head-ptr, 4));
  store-int8(piece-5, add-int(content-head-ptr, 5));
  store-int8(piece-6, add-int(content-head-ptr, 6));
  store-int8(piece-7, add-int(content-head-ptr, 7));
  _proceed(b, 8)
}

define append-int64-big-endian(b: &builder, x: int64): unit {
  let piece-0 = trunc-int64-int8(lshr-int64(and-int64(0x00000000000000ff, x), 0)) in
  let piece-1 = trunc-int64-int8(lshr-int64(and-int64(0x000000000000ff00, x), 8)) in
  let piece-2 = trunc-int64-int8(lshr-int64(and-int64(0x0000000000ff0000, x), 16)) in
  let piece-3 = trunc-int64-int8(lshr-int64(and-int64(0x00000000ff000000, x), 24)) in
  let piece-4 = trunc-int64-int8(lshr-int64(and-int64(0x000000ff00000000, x), 32)) in
  let piece-5 = trunc-int64-int8(lshr-int64(and-int64(0x0000ff0000000000, x), 40)) in
  let piece-6 = trunc-int64-int8(lshr-int64(and-int64(0x00ff000000000000, x), 48)) in
  let piece-7 = trunc-int64-int8(lshr-int64(and-int64(0xff00000000000000, x), 56)) in
  let content-head-ptr = _get-head-ptr(b, 8) in
  store-int8(piece-7, add-int(content-head-ptr, 0));
  store-int8(piece-6, add-int(content-head-ptr, 1));
  store-int8(piece-5, add-int(content-head-ptr, 2));
  store-int8(piece-4, add-int(content-head-ptr, 3));
  store-int8(piece-3, add-int(content-head-ptr, 4));
  store-int8(piece-2, add-int(content-head-ptr, 5));
  store-int8(piece-1, add-int(content-head-ptr, 6));
  store-int8(piece-0, add-int(content-head-ptr, 7));
  _proceed(b, 8)
}

define append-int(b: &builder, x: int): unit {
  let size = core.word.size in
  let content-head-ptr = _get-head-ptr(b, size) in
  store-int(x, add-int(content-head-ptr, 0));
  _proceed(b, size)
}

define append-int64-UTF8(b: &builder, x: int64): unit {
  let fmt = core.text._get-content-pointer("%ld") in
  let zero: int = 0 in
  let fragment-size: int = magic external snprintf(zero, zero, fmt)(x: int64) in
  let content-head-ptr = _get-head-ptr(b, fragment-size) in
  let _: int = magic external sprintf(content-head-ptr, fmt)(x: int64) in
  _proceed(b, fragment-size)
}

define append-int32-little-endian(b: &builder, x: int32): unit {
  let piece-0 = trunc-int32-int8(lshr-int32(and-int32(0x000000ff, x), 0)) in
  let piece-1 = trunc-int32-int8(lshr-int32(and-int32(0x0000ff00, x), 8)) in
  let piece-2 = trunc-int32-int8(lshr-int32(and-int32(0x00ff0000, x), 16)) in
  let piece-3 = trunc-int32-int8(lshr-int32(and-int32(0xff000000, x), 24)) in
  let content-head-ptr = _get-head-ptr(b, 4) in
  store-int8(piece-0, add-int(content-head-ptr, 0));
  store-int8(piece-1, add-int(content-head-ptr, 1));
  store-int8(piece-2, add-int(content-head-ptr, 2));
  store-int8(piece-3, add-int(content-head-ptr, 3));
  _proceed(b, 4)
}

define append-int32-big-endian(b: &builder, x: int32): unit {
  let piece-0 = trunc-int32-int8(lshr-int32(and-int32(0x000000ff, x), 0)) in
  let piece-1 = trunc-int32-int8(lshr-int32(and-int32(0x0000ff00, x), 8)) in
  let piece-2 = trunc-int32-int8(lshr-int32(and-int32(0x00ff0000, x), 16)) in
  let piece-3 = trunc-int32-int8(lshr-int32(and-int32(0xff000000, x), 24)) in
  let content-head-ptr = _get-head-ptr(b, 4) in
  store-int8(piece-3, add-int(content-head-ptr, 0));
  store-int8(piece-2, add-int(content-head-ptr, 1));
  store-int8(piece-1, add-int(content-head-ptr, 2));
  store-int8(piece-0, add-int(content-head-ptr, 3));
  _proceed(b, 4)
}

define append-int32-UTF8(b: &builder, x: int32): unit {
  append-int64-UTF8(b, zext-int32-int64(x))
}

define append-int16-little-endian(b: &builder, x: int16): unit {
  let piece-0 = trunc-int16-int8(lshr-int16(and-int16(0x00ff, x), 0)) in
  let piece-1 = trunc-int16-int8(lshr-int16(and-int16(0xff00, x), 8)) in
  let content-head-ptr = _get-head-ptr(b, 2) in
  store-int8(piece-0, add-int(content-head-ptr, 0));
  store-int8(piece-1, add-int(content-head-ptr, 1));
  _proceed(b, 2)
}

define append-int16-big-endian(b: &builder, x: int16): unit {
  let piece-0 = trunc-int16-int8(lshr-int16(and-int16(0x00ff, x), 0)) in
  let piece-1 = trunc-int16-int8(lshr-int16(and-int16(0xff00, x), 8)) in
  let content-head-ptr = _get-head-ptr(b, 2) in
  store-int8(piece-1, add-int(content-head-ptr, 0));
  store-int8(piece-0, add-int(content-head-ptr, 1));
  _proceed(b, 2)
}

define append-int16-UTF8(b: &builder, x: int16): unit {
  append-int64-UTF8(b, zext-int16-int64(x))
}

define append-int8(b: &builder, x: int8): unit {
  let content-head-ptr = _get-head-ptr(b, 1) in
  store-int8(x, add-int(content-head-ptr, 0));
  _proceed(b, 1)
}

define append-int8-UTF8(b: &builder, x: int8): unit {
  append-int64-UTF8(b, zext-int8-int64(x))
}

define append-float64-little-endian(b: &builder, x: float64): unit {
  append-int64-little-endian(b, magic cast(float64, int64, x))
}

define append-float64-big-endian(b: &builder, x: float64): unit {
  append-int64-big-endian(b, magic cast(float64, int64, x))
}

define append-float64-UTF8(b: &builder, x: float64): unit {
  let fmt = core.text._get-content-pointer("%lf") in
  let zero: int = 0 in
  let fragment-size: int = magic external snprintf(zero, zero, fmt)(x: float64) in
  let content-head-ptr = _get-head-ptr(b, fragment-size) in
  let _: int = magic external sprintf(content-head-ptr, fmt)(x: float64) in
  _proceed(b, fragment-size)
}

define append-float32-little-endian(b: &builder, x: float32): unit {
  append-int32-little-endian(b, magic cast(float32, int32, x))
}

define append-float32-big-endian(b: &builder, x: float32): unit {
  append-int32-big-endian(b, magic cast(float32, int32, x))
}

define append-float32-UTF8(b: &builder, x: float32): unit {
  append-float64-UTF8(b, fpext-float32-float64(x))
}

define append-float16-little-endian(b: &builder, x: float16): unit {
  append-int16-little-endian(b, magic cast(float16, int16, x))
}

define append-float16-big-endian(b: &builder, x: float16): unit {
  append-int16-big-endian(b, magic cast(float16, int16, x))
}

define append-float16-UTF8(b: &builder, x: float16): unit {
  append-float64-UTF8(b, fpext-float16-float64(x))
}

define append-binary(b: &builder, x: &binary): unit {
  let text-ptr = core.binary._get-content-pointer(x) in
  let text-byte-len = core.binary.binary-length(x) in
  let content-head-ptr = _get-head-ptr(b, text-byte-len) in
  let zero: int = 0 in
  magic external llvm.memcpy.p0.p0.i64(content-head-ptr, text-ptr, text-byte-len, zero);
  _proceed(b, text-byte-len)
}

define append-text(b: &builder, x: &text): unit {
  let text-ptr = core.text._get-content-pointer(x) in
  let text-byte-len = core.text.text-byte-length(x) in
  let content-head-ptr = _get-head-ptr(b, text-byte-len) in
  let zero: int = 0 in
  magic external llvm.memcpy.p0.p0.i64(content-head-ptr, text-ptr, text-byte-len, zero);
  _proceed(b, text-byte-len)
}

define _print-content-size(b: &builder): unit {
  tie _Builder of {content} = core.cell.read(b) in
  let current-len = core.binary.binary-length(content) in
  printf("size: {}\n", [show-int(current-len)])
}

foreign {
  write(int, pointer, int): int,
}

define zen(): unit {
  let b = create(4) in
  let _ on b =
    append-text(b, "hello");
    append-int64-UTF8(b, 123);
    append-text(b, "world")
  in
  let result = get(b) in
  printf("{}\n", [_Text(result)])
  // let b = create(4) in
  // let _ on b =
  //   append-text(b, "hello");
  //   append-float16-UTF8(b, 2.3);
  //   append-int64-UTF8(b, -123);
  //   append-float64-UTF8(b, -123.223);
  //   append-text(b, "あいうえお")
  // in
  // let txt = get(b) in
  // let len on txt = core.binary.binary-length(txt) in
  // let stdout: int = 1 in
  // let ptr on txt = core.binary._get-content-pointer(txt) in
  // magic external write(stdout, ptr, len);
  // discard(txt)
}
